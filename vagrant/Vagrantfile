Vagrant.configure("2") do |config|
 # ---------------- VyOs ----------------
  config.vm.define "vyos" do |vyos|
    vyos.vm.box = "vyos/current"

    vyos.vm.provider "virtualbox" do |vb|
      vb.name = "vyos"
      vb.memory = "512"
      vb.cpus = 2
    end

    vyos.vm.network "private_network", ip: "10.100.1.0", virtualbox__intnet: "prod"
    vyos.vm.network "private_network", ip: "10.100.2.0", virtualbox__intnet: "test"
    vyos.vm.network "private_network", ip: "fd11:2:3:4::10", netmask: "64", virtualbox__intnet: "entw"
    #config.vm.disk :disk, size: "20GB", primary: true
    #vyos.vm.network "private_network", type: "dhcp"
  end

 # ---------------- Prod VM ----------------
  config.vm.define "client_prod" do |client_prod|
    client_prod.vm.box = "debian/bookworm64"

    client_prod.vm.provider "virtualbox" do |vb|
      vb.name = "client_prod"
      vb.memory = "512"
      vb.cpus = 2
    end

    #config.vm.disk :disk, size: "20GB", primary: true
    #client_prod.vm.network "private_network", type: "dhcp"
    client_prod.vm.network "private_network", type: "dhcp", virtualbox__intnet: "prod"
  end

 # ---------------- Entw VM ----------------
  config.vm.define "client_entw" do |client_entw|
    client_entw.vm.box = "debian/bookworm64"

    client_entw.vm.provider "virtualbox" do |vb|
      vb.name = "client_entw"
      vb.memory = "512"
      vb.cpus = 2
    end

    #config.vm.disk :disk, size: "20GB", primary: true
    #client_test.vm.network "private_network", type: "dhcp"
    client_entw.vm.network "private_network", type: "dhcp", virtualbox__intnet: "entw"
  end

 # ---------------- Test VM ----------------
  config.vm.define "client_test" do |client_test|
    client_test.vm.box = "debian/bookworm64"

    client_test.vm.provider "virtualbox" do |vb|
      vb.name = "client_test"
      vb.memory = "512"
      vb.cpus = 2
    end

    #config.vm.disk :disk, size: "20GB", primary: true
    #client_test.vm.network "private_network", type: "dhcp"
    client_test.vm.network "private_network", type: "dhcp", virtualbox__intnet: "test"

 # ---------------- ANSIBLE ----------------
    client_test.vm.provision "ansible" do |ansible|
     ansible.playbook = "main.yml"
     ansible.limit = "all"
     ansible.host_vars = {
       "client_prod" => {
         "named" => "prod_named_v6.conf",
         "zone" => "azubi.dataport.de.zone",
         "gateway" => "10.100.1.254",
         "env" => "prod"
       },
       "client_entw" => {
         "named" => "entw_named.conf",
         "zone" => "entw.azubi.dataport.de.zone",
         "gateway" => "fd11:2:3:4::10",
         "env" => "entw",
         "v6" => "-6"
       },
       "client_test" => {
         "named" => "test_named.conf",
         "zone" => "test.azubi.dataport.de.zone",
         "gateway" => "10.100.2.254",
         "env" => "test"
        }
      }
      ansible.groups = {
        "router" => ["vyos"],
        "clients" => ["client_prod", "client_test", "client_entw"],
        "dns" => ["client_prod", "client_test"],
        "docker" => ["client_prod"],
        "nfs" => ["client_test"]
      }
    end
  end

 # ---------------- GLOBAL TRIGGER ----------------
  config.trigger.after :up do |trigger|
    trigger.name = "Run tests"
    #trigger.run = { path: "integration_tests.sh" }
    #trigger.run = { inline: "source .venv/bin/activate.fish; pip install -r requirements.txt; pytest tests/integration_test.py" }
    trigger.run = { inline: "pytest tests/integration_test.py" }
    trigger.only_on = "client_test"
  end
end

